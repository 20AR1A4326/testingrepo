1) c-language

2) java
   |- core java
   |- advance java
   |- frameworks (hibernate, spring)
   |- tools (maven, git etc)

3) sql

4) ui technologies (html, css, javascript etc)

5) xml

software company
|- 3 things are required

1. degree
2. communication
3. 2 programming languages (c-language and java)

---------------------------------------------------------------------------

c-language
----------
what is c-language?
--> c is a programming language, high level language and procedure oriented
    programming language.

what is a program?
--> a program is a set of instructions and a program is written to perform
    some task or operation.

#include<stdio.h>
#include<conio.h>

int main()
{
   int a, b, c;  -->  line or instruction
   clrscr();
   a = 10;
   b = 20;
   c = a + b;
   printf("%d",c);
   getch();
   return 1;
}

c --> programming language --> programs --> software/application --> task

--> c is a programming language and using programming language we write
    programs in order to develop or build software or application and using
    software or application we perform some task.

--> as c-language uses english words and it is user-friendly thats why c
    is called as high level language.

computer languages
------------------
--> computer languages are divided into 2 types

1. high level languages
2. low level languages
   i. assembly language
   ii. binary language (machine language)

--> the language which uses english words and which is user-friendly such
    language is called as high level language.

ex: c, c++, java, .net, python etc

--> the language which uses special symbols (MNEMONICS) such language is
    called as assembly language.

--> the language which uses only 0's and 1's and which is machine friendly
    such language is called as binary language or machine language.

--> as c-language follows the principles of procedure oriented programming
    paradigm thats why c-language is called as procedure oriented programm-
    ing language.

translators
-----------
what is a translator?
--> a translator is a software which converts one language into another
    language.

--> there are 3 types of translators

1. compiler
2. interpreter
3. assembler

--> compiler is a translator which converts high level language into binary
    language and it also reports errors (syntax errors) at compile time.

--> interpreter is a translator which converts high level language into
    binary language line by line.

--> assembler is a translator which converts assembly language into binary
    language.

note:
1. all high level languages use either compiler or interpreter.

2. only assembly language uses assembler.

3. c-language uses compiler.

---------------------------------------------------------------------------

c --> procedure oriented programming language

java --> object oriented programming language

aspectj --> aspect oriented programming language

what is procedure oriented programming (pop)?
--> procedure oriented programming is a programming paradigm.

--> a programming paradigm is also called as programming methodology.

paradigm means principles

principles of pop
-----------------
--> in procedure oriented programming, the program is divided into multiple
    sub tasks and every sub task is written inside the function or procedure.

note: the advantage of using function is code reusability.

what is object oriented programming (oop)?
--> object oriented programming is a programming paradigm.

--> a programming paradigm is also called as programming methodology.

principles of oop
-----------------
1. class
2. object
3. data hiding
4. abstraction
5. encapsulation
6. inheritance (is-a relationship)
7. composition (has-a relationship)
8. polymorphism

--> as java follows the principles of object oriented programming paradigm
    thats why java is called as object oriented programming language.

what is aspect oriented programming (aop)?
--> aspect oriented programming is a programming paradigm.

--> a programming paradigm is also called as programming methodology.

principles of aop
-----------------
1. aspect
2. advice
3. join point
4. point cut
5. weaving
6. target
7. proxy

--> as aspectj follows the principles of aspect oriented programming para-
    digm thats why aspectj is called aspect oriented programming language.

programming paradigms (programming methodologies)
---------------------
1. procedure oriented programming (pop)
2. object oriented programming (oop)
3. aspect oriented programming (aop)

---------------------------------------------------------------------------

number systems
--------------
what is a number system?
--> a number system is a technique or a system to represent the numbers in
    the computer system.

--> there are 4 number systems

1. decimal number system
2. octal number system
3. hexadecimal number system
4. binary number system

decimal means 10
octal means 8
hexadecimal means 16
binary means 2

decimal number system
---------------------
base	-	10
range	-	0 to 9

ex: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 59, 100, 123, 1000, 12345 etc

octal number system
-------------------
base	-	8
range	-	0 to 7

ex: 0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23,
    24, 25, 26, 27, 30, 31 ..... 37, 40, 41 ..... 47, 50, 51 ..... 57, 60,
    61 ..... 67, 70, 71 ..... 77, 100, 101, 102 ..... 107, 110, 111, 112,
    113, 114 ..... 117, 120, 121 ..... 127, 130, 131 ..... 137, 140, 141,
    142 ..... 147, 150, 151 ..... 157, 160, 161 ..... 167, 170, 171 .....
    177, 200, 201 .... 207, 210, 211 .... 217, 220, 221 .... 227, 230, 231
    ..... 237, 240, 241 ..... 247, 250, 251 ..... 257, 260, 261 ..... 267,
    270, 271 .... 277, 300, 301 ..........................................   
    ......................................................................
    ......................................................................
    777, 1000, 1001 ..... 1007, 1010, 1011, 1012 .... 1017, 1020, 1021 ... 
    1027, 1030, 1031 ..... 1037, 1040, 1041 ..... 1047, 1050, 1051 .......
    1057, 1060, 1061 ..... 1067, 1070, 1071 ..... 1077, 1100, 1101 .......
    1107, 1110 ...........................................................
    ......................................................................
    ......................................................................
    7777, 10000, 10001, 10007 ..................  

hexadecimal number system
-------------------------
base	-	16
range	-	0 to 15 (0 1 2 3 4 5 6 7 8 9 a b c d e f)

ex: 2a, 7d3, 9fac, 3F8D, 5f8A3D, acfd, 245 etc

binary number system
--------------------
base	-	2
range	-	0 and 1

ex: 10, 101, 100, 1010, 1100, 1010, 101011, 101110 etc

programming language --> programs --> octal, hexadecimal, binary
                                                 |
                                               prefix
decimal --> no prefix
octal --> 0
hexadecimal --> 0x or 0X
binary --> 0b or 0B

int a = 10;
int b = 010;   //8
int c = 0x10;  //16
int d = 0b10;  //2
 
---------------------------------------------------------------------------

keywords (reserved words) 
--------
what are keywords?
--> c-language has grammar, the grammar of c-language is represented by
    some words which are reserved or fixed in c-language for some purpose
    and every word is having some meaning attach with it which is known 
    to c-compiler such words are called as keywords.

--> in c-language, 32 keywords are there.

ex: if, else, switch, case, default, goto, return, break, continue, int,
    float, double, char, long, void, signed, unsigned, for, while, do etc

spoken languages
|- english, telugu, hindi etc

english
|- grammar
   |- english words (keywords)
      |- reserved or fixed
      |- meaning
         |- person

telugu
|- grammar
   |- telugu words (keywords)
      |- reserved or fixed
      |- meaning
         |- person
        
programming languages --> c, c++, java, python etc

scripting languages --> javascript, vbscript etc

query languages --> sql

markup languages --> html, xml

c-language
|- grammar
   |- some words (keywords)
      |- reserved or fixed
      |- meaning
         |- c-compiler

short, int, long, float, double, char, void --> datatypes
if, else, switch, case, default --> conditional statements
for, do, while --> looping statements
break, continue, return, goto --> jumping statements

javascript
|- grammar
   |- some words (keywords)
      |- reserved or fixed
      |- meaning
         |- browser

sql
|- grammar
   |- some words (keywords) 
      |- reserved or fixed
      |- meaning
         |- database

html
|- grammar 
   |- html tags (keywords)
      |- reserved or fixed 
      |- meaning
         |- browser

identifiers
-----------
what is an identifier?
--> any name in c-language is called as identifier.

ex: variable name, function name, array name, pointer name, string name etc

rules for identifiers
---------------------
1. a to z
   A to Z
   0 to 9
   _

2. an identifier cannot start with digit

3. an identifier can start with alphabet or underscore

4. >31 characters (length limit)

5. keywords cannot be used as identifiers

6. identifiers are case sensitive

7. we cannot use predefined function names as identifiers

ex:
1. abc123   
2. 5xyz   //invalid
3. abc_123   
4. xyz#123  //invalid
5. _abc123   
6. break  //invalid
7. Fact  
8. printf  //invalid

constants (literals)
---------
what is a constant?
--> a fixed value which can be assigned to a variable is called as constant
    or literal.

ex: int a = 10;    here 10 is a constant or literal

types of constants
------------------
--> there are 2 types of constants

1. numeric constants
   i. integer constants
      a. decimal constants
      b. octal constants
      c. hexadecimal constants
   ii. floating constants
2. non-numeric constants
   i. character constants
   ii. string constants

decimal constants
-----------------
base	-	10
range	-	0 to 9
prefix	-	no prefix

ex:
1. int a = 2;
2. int a = 5;
3. int a = 8;
4. int a = 10;
5. int a = 123;
6. int a = 1000;

octal constants
---------------
base	-	8
range	-	0 to 7
prefix	-	0

ex:
1. int a = 04;
2. int a = 07;
3. int a = 08;  //c.e
4. int a = 010;
5. int a = 0523;
6. int a = 07425;

hexadecimal constants
---------------------
base	-	16
range	-	0 to 15 (0 1 2 3 4 5 6 7 8 9 a b c d e f)
prefix	-	0x or 0X

ex:
1. int num = 0x10;
2. int num = 0xab;
3. int num = 0x2a5f;
4. int num = 0xECD;
5. int num = 0x7f3Da;

memory units (memory sizes)
------------
1 bit -> 0 or 1
1 byte -> 8 bits
1 kilo byte -> 1024 bytes
1 mega byte -> 1024 kb 
1 giga byte -> 1024 mb
1 tera byte -> 1024 gb
1 peta byte -> 1024 tb
1 zeta byte -> 1024 pb
1 exa byte -> 1024 zb
1 yotta byte -> 1024 eb
1 bronto byte -> 1024 yb
1 geop byte -> 1024 bb             

c-language --> datatypes --> int, float, double, char, long etc
                              |     |       |      |    |
                              2     4       8      1    4    bytes

note:
1. in c-language, by default every integer number is int type.

2. in c-language, to represent an integer number as long type we have to
   use l or L letter as a suffix.

ex: 10 --> int type
    10L or 10l --> long type

3. in c-language, by default every floating number is double type.

4. in c-language, to represent a floating number as float type we have to
   use f or F letter as a suffix.

ex: 2.5 --> double type
    2.5f or 2.5F --> float type

5. c is loose or weak type checking language.

float a = 10;
printf("%f",a);  //10.0

int b = 2.5;  
printf("%d",b);  //2  

---------------------------------------------------------------------------
laptop
|- processor --> intel core i5 | amd ryzen 5 --> 6 cores --> H series
|- ram --> 8gb
|- storage --> HDD | SSD --> SSD --> 500gb

processor --> cores

each core represents 1 cpu
---------------------------------------------------------------------------

floating constants
------------------
1. float a = 2.5;
2. float a = 2.5f;
3. double a = 2.5;
4. double a = 2.5f;
5. float a = 10;  //10.0
6. float a = 011;  //9.0
7. float a = 0x10;  //16.0
8. float a = 12e3;  //12000.0

---------------------------------------------------------------------------

computer
|- memory
   1. primary memory
      ex: ram (current working memory)
   2. secondary memory
      ex: hard disk

character constants
-------------------
--> a single alphabet or a single digit or a single special character or a
    single white space character which is enclosed within single quotes is
    called as character constant.

ex: char ch = 'a';
    char ch = '5';
    char ch = '@';
    char ch = ' ';
    char ch = 'ab';  //invalid
    char ch = '10';  //invalid
    char ch = '@#';  //invalid
    char ch = 97;  //a

string constants
----------------
--> a group of characters which are enclosed within double quotes is called
    as string constant.

ex: "hyderabad", "ravi kumar", "abc123$#@" etc

variable
--------
what is a variable?
--> a variable is a name or an identifier which is given to the memory 
    location internally.

--> variables are used in the program to store data and using variables we
    access the data in the program to perform operations on data.

--> a variable is a container which is used to hold some data.

--> variables are place holders in the program.

--> any time any place in the program we can change or modify the value of
    the variable so variables are varying in nature.

declaration of variable
-----------------------
--> writing the datatype and variable name is called declaring a variable.

syntax: datatype variable_name = <initialization>;

here initialization is optional

ex:
1. int num;
2. float result;
3. char ch;
4. double area;
5. long fact;

initialization of variable
--------------------------
--> assigning or storing the value to a variable is called initialization 
    of variable.

ex:
1. int a;  (or)  int a = 10;
   a = 10;

2. float b;  (or)  float b = 2.5;
   b = 2.5;

3. char ch;  (or)  char ch = '@';
   ch = '@';

datatypes
---------
what are datatypes?
--> datatypes are keywords and datatypes are used to specify two things.

1. type of data
2. size of data

--> datatypes are used to specify the type of data a variable should hold
    or store.

--> datatypes are used to specify the size of memory should be allocated
    for the data.

types of datatypes
------------------
--> there are 2 types of datatypes

1. primary datatypes
   i. primitive datatypes
      ex: short, int, long, float, double, char etc

2. secondary datatypes (non-primitive datatypes)
   i. derived datatypes
      ex: arrays, strings, functions, pointers

   ii. userdefined datatypes
       ex: structure, union, enum

--> primitive datatypes allow a variable to store single value only.

--> derived datataypes and userdefined datatypes allow a variable to store
    multiple values.

--> primitive datatypes are divided into 4 types

    1. integer datatypes
    2. floating datatypes
    3. character datatypes
    4. void datatype

		Integer Datatypes
------------------------------------------------------
    datatype	    size (bytes)        range
------------------------------------------------------
1. signed short     2             -32768 to 32767
       or 
     short

2. unsigned short   2                0 to 65535

3. signed int       2 or 4        -32768 to 32767
       or
      int

4. unsigned int     2 or 4           0 to 65535

5. signed long      4            -2,147,483,648 to 
       or                              2,147,483,647
      long                                             

6. unsigned long    4             0 to 4,294,967,295
-----------------------------------------------------
--> signed and unsigned are keywords in c-language.

--> signed keyword represents both +ve and -ve values where as unsigned
    represents only +ve values.

--> in c-language, int datatype size is 2 or 4 bytes

c-language -> 70's decade -> 1972 -> computers -> micro processor
                                       	               |
                                    		     16 bit
16 bit compiler --> int size is 2 bytes

32 bit compiler --> int size is 4 bytes

		 Floating Datatypes               
-----------------------------------------------------
    datatype         size           range
-----------------------------------------------------
1. float             4          -3.4e-38 to 3.4e38

2. double            8          -1.7e-308 to 1.7e308
-----------------------------------------------------

--> float is 32 bit floating point datatype where as double is 64 bit 
    floating point datatype.

--> float uses 6 digits of precision where as double uses 14 digits of 
    precision.

		 Character Datatypes
---------------------------------------------------
    datatype	     size           range
---------------------------------------------------
1. signed char        1         -128 to 127
       or
      char

2. unsigned char      1          0 to 255
---------------------------------------------------

in c-language --> char --> 1 byte

in java --> char --> 2 bytes

c-language
|- ascii --> 0 to 255 (1 byte)

java
|- unicode --> 0 to 65535 (2 bytes)

---------------------------------------------------------------------------
void --> it is a keyword and a datatype.

--> void means empty or no value.

--> void is used as return type of the function.

--> if the return type of the function is void then such function never
    return any value.
---------------------------------------------------------------------------

functions
---------
what is a function?
--> a function is a reusable block of statements and a function is used to
    perform some operation.

syntax: return-type function_name(parameters/arguments)
        {
           statement(s);
           return statement;
        }

return type
-----------
--> before the function name if we use any datatype then it is called as
    return type of the function.

--> in c-language, a function may return some value or may not return some
    value so the return type of the function indicates whether a function
    returns a value or not.

--> a function whose return type is void such function never return any
    value and a function whose return type is other than void such function
    returns some value.

--> return type of the function is mandatory.

return statement
----------------
--> return statement is used to return the value to the function whose
    return type is other than void.

--> we cannot use return statement to return the value to the function 
    whose return type is void otherwise compiler gives error.

--> if the return type of the function is other than void then we must 
    have to use return statement otherwise compiler gives error.

--> return statement is optional, it depends on return type of the 
    function.

parameters (arguments)
----------
--> if we use any variables inside the parenthesis of the function such
    variables are called as parameters or arguments.

--> function uses parameters to pass the data and to receive the data.

--> parameters or arguments are optional.

types of parameters
-------------------
--> there are 2 types of parameters

1. actual parameters
2. formal parameters

--> function uses actual parameters to pass the data to formal parameters
    and function uses formal parameters to receive the data from actual
    parameters.

function body
-------------
--> function body contains statements.

--> function body is mandatory.

--> function body is also called as implementation.

function name
-------------
--> a function must have a unique name and ends with parenthesis.

different sections of the functions
-----------------------------------
--> function has 2 sections

1. function header or function prototype

--> it consists of function name, return type and parameters only.

ex: int add(int a, int b);
    void sub(int x, int y); 
    void mul();

2. function body or implementation

--> it consists of statements.

ex: void fun()
    {
       statement(s);
    }

types of functions
------------------
--> there are 2 types of functions

1. predefined functions
2. userdefined functions

--> the functions which are already developed and available in c-language
    are called as predefined functions.

ex: printf(), scanf(), clrscr(), getch(), fflush(), gets(), puts() etc

--> the functions which are developed by the programmer are called as
    userdefined functions.

ex: add(), sub(), mul(), work(), calculate() etc

categories of functions
-----------------------
--> there are 4 categories of functions

1. a function without parameters or arguments and without return statement

ex: void add()
    {
    }

2. a function without parameters or arguments and with return statement

ex: int add()
    {
       return res;
    }

3. a function with parameters or arguments and without return statement

ex: void add(int a, int b)
    {
    }

4. a function with parameters or arguments and with return statement

ex: int add(int a, int b)
    {
       return a + b;
    }

---------------------------------------------------------------------------

Note: in c-language, if we want to work with userdefined functions then we
      must have to write 3 things :

      1. function declaration
      2. function definition
      3. function caller

function declaration
--------------------
--> writing the name of the function, return type of the function and 
    parameters of the function is called as function declaration.

       --------------
        void show();   //function declaration
       --------------

function definition 
-------------------
--> writing the function body is called as function definition.

    ---------------
      void show()   //function definition
      {       
      }
    ---------------

write the program --> compile the program --> run or execute the program

note: execution of c-program always starts from main function, operating
      system calls only main function but not userdefined functions.

--> to call userdefined functions we should call userdefined functions 
    from main function by using function caller.

function caller 
---------------
--> using function caller we can call a function from other function.

--> to write function caller we use function name.

       ---------
        show();  //function caller
       ---------

what is calling function?
--> a function which calls other function is calling function.

what is called function?
--> a function which is called by calling function is called function.

---------------------------------------------------------------------------

basic predefined functions in c-language
----------------------------------------
1. printf(): 

--> it is used to display the value to the standard output device (monitor).

syntax:
  printf("control string with format specifiers",arg-1, arg-2 .... arg-n);

2. scanf(): 

--> it is used to read the values from the standard input device that is 
    keyboard at runtime.

syntax:
  scanf("format specifiers",&arg-1, &arg-2, &arg-3 .......... &arg-n);

& --> ampersand symbol and address of operator

3. clrscr(): 

--> it is used to clear the output screen.

syntax: clrscr();

4. getch(): 

--> getch() holds the output screen until a key is pressed and once a key
    is pressed it reads the character and releases the output screen.

syntax: getch();

ways of writing printf()
------------------------
syntax:
 printf("control string with format specifiers",arg-1,arg-2 . . . . arg-n);

--> in printf() control string, format specifiers and arguments are optional
    only double quotes are mandatory

1. printf();  //error  

2. printf("");

3. printf("welcome");  //welcome

what is control string?
--> in printf() inside the double quotes everything which is not a format 
    special is called as control string and control string is displayed as 
    it is.

4. int a = 10;

printf("a");  //a

printf("%d",a);  //10
 
format specifiers :
-----------------
--> format specifiers start with % symbol.

--> format specifiers are used to specify printf() to display specific 
    type of values.

--> format specifiers are used to specify scanf() to read specific type 
    of values and store in variables.

--> format specifiers act as place holders in printf() and scanf().

------------------------------------
         format specifiers
------------------------------------
short, int	  -	  %d
long		  -	  %ld
float		  -	  %f
double		  -	  %lf
char		  -	  %c
string		  -	  %s
unsigned	  -	  %u
octal		  -	  %o
hexadecimal	  - 	  %x
-------------------------------------

5. int a = 10;

output: a = 10

6. int a = 10, b = 20, c = 30;

output: a = 10, b = 20, c = 30

7. int num = 5, i = 4;

output: 5 x 4 = 20

8. int id = 1;
   char name[10] = "ravi";
   char gender = 'm';
   float salary = 1000.0;

output: id = 1, name = ravi, gender = m, salary = 1000.0

escape sequences 
----------------
--> in c-language, fixed set of escape sequences are there.

--> escape sequences start with \.

--> for special purposes we use escape sequences like new line, tabspace,
    backspace, double quote etc.

--------------------------------
\n	-	new line
\t	-	tabspace
\b	-	backspace
\r	-	carriage return
\a	-	alarm
\\	-	\
\"	-	"
\'	-	'
--------------------------------

note: all the escape sequences can be used as character constants in 
      c-language.

char ch = 'a';
char ch = '5';
char ch = '@';
char ch = ' ';
char ch = '\n';
char ch = '\b';
char ch = '\t';
char ch = '\r';
char ch = '\x';  

---------------------------------------------------------------------------






